using System;
using System.Reflection;
using Mindbox.Data.Linq.Mapping;

namespace Mindbox.Data.Linq.Entity.ModelConfiguration.Configuration
{
	/// <summary>
	/// Configures a relationship that can only support foreign key properties that are not exposed in the object model.
	/// </summary>
	public class ForeignKeyNavigationPropertyConfiguration : CascadableNavigationPropertyConfiguration
	{
		internal ForeignKeyNavigationPropertyConfiguration(PropertyInfo associationProperty)
		{
			if (associationProperty == null)
				throw new ArgumentNullException("associationProperty");

			AssociationProperty = associationProperty;
		}


		protected PropertyInfo AssociationProperty { get; private set; }


		/// <summary>
		/// Configures the relationship to use foreign key property(s) that are not exposed in the object model.
		/// The column(s) and table can be customized by specifying a configuration action.
		/// If an empty configuration action is specified then column name(s) will be generated by convention.
		/// If foreign key properties are exposed in the object model then use the HasForeignKey method.
		/// Not all relationships support exposing foreign key properties in the object model.
		/// </summary>
		/// <param name="configurationAction"> Action that configures the foreign key column(s) and table. </param>
		/// <returns> A configuration object that can be used to further configure the relationship. </returns>
		public CascadableNavigationPropertyConfiguration Map(
			Action<ForeignKeyAssociationMappingConfiguration> configurationAction)
		{
			if (configurationAction == null)
				throw new ArgumentNullException("configurationAction");

			throw new NotImplementedException();
		}


		internal virtual ColumnAttributeByMember TryGetColumnAttribute(DbModelBuilder dbModelBuilder)
		{
			if (dbModelBuilder == null)
				throw new ArgumentNullException("dbModelBuilder");

			return null;
		}

		internal virtual AssociationAttributeByMember GetAssociationAttribute(DbModelBuilder dbModelBuilder)
		{
			if (dbModelBuilder == null)
				throw new ArgumentNullException("dbModelBuilder");

			return null;
		}
	}
}
